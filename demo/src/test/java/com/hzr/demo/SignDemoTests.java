package com.hzr.demo;import org.dom4j.DocumentException;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.Test;import org.ofdrw.core.basicType.ST_Box;import org.ofdrw.gm.cert.PKCS12Tools;import org.ofdrw.gm.ses.v4.SESeal;import org.ofdrw.reader.OFDReader;import org.ofdrw.reader.keyword.KeywordExtractor;import org.ofdrw.reader.keyword.KeywordPosition;import org.ofdrw.sign.NumberFormatAtomicSignID;import org.ofdrw.sign.OFDSigner;import org.ofdrw.sign.SignMode;import org.ofdrw.sign.signContainer.SESV4Container;import org.ofdrw.sign.stamppos.NormalStampPos;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.security.GeneralSecurityException;import java.security.PrivateKey;import java.security.cert.Certificate;import java.util.List;/** * @Classname SignDemoTests * @Author: hzr * @Description TODO * @Version 1.0.0 * @Date 2023/12/6 10:33 * @Created by 22906 */public class SignDemoTests {    @Test    public void signtest() throws GeneralSecurityException, IOException, DocumentException {        //需要签章的文件路径        Path from = Paths.get("E:\\upload_pdfjs\\ofd_file\\test.ofd");        //保存签章的文件路径        Path to = Paths.get("E:\\upload_pdfjs\\ofd_file\\sign\\test.ofd");        // 签章        Path userP12Path = Paths.get("E:\\upload_pdfjs\\ofd_file\\sign\\USER.p12");        Path sealPath = Paths.get("E:\\upload_pdfjs\\ofd_file\\sign\\UserV4.esl");        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, "private", "777777");        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, "private", "777777");        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));        String keyword = "好呀";        try (OFDReader reader = new OFDReader(from)) {            List<KeywordPosition> positionList = KeywordExtractor.getKeyWordPositionList(reader, keyword);            // 保证有且只有一个关键字返还            Assertions.assertEquals(1, positionList.size());            if (positionList.size() > 0) {                try (OFDSigner signer = new OFDSigner(reader, to, new NumberFormatAtomicSignID())) {                    SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);                    // 2. 设置签名模式                    // signer.setSignMode(SignMode.WholeProtected);                    signer.setSignMode(SignMode.ContinueSign);                    // 3. 设置签名使用的扩展签名容器                    signer.setSignContainer(signContainer);                    for (KeywordPosition position : positionList) {                        // 4. 中心点对齐签署                        ST_Box box = position.getBox();                        signer.addApPos(new NormalStampPos(position.getPage(), box.getTopLeftX() + box.getWidth() / 2 - 20,                                box.getTopLeftY() + box.getHeight() / 2 - 20, 40, 40));                    }                    // 5. 执行签名                    signer.exeSign();                    // 6. 关闭签名引擎，生成文档。                    System.out.println(">> 生成文件位置: " + to.toAbsolutePath().toAbsolutePath());                }            }        }    }}