package com.hzr.demo.common;import org.dom4j.DocumentException;import org.ofdrw.core.basicType.ST_Box;import org.ofdrw.gm.cert.PKCS12Tools;import org.ofdrw.gm.ses.v4.SESeal;import org.ofdrw.reader.OFDReader;import org.ofdrw.reader.keyword.KeywordExtractor;import org.ofdrw.reader.keyword.KeywordPosition;import org.ofdrw.sign.NumberFormatAtomicSignID;import org.ofdrw.sign.OFDSigner;import org.ofdrw.sign.SignMode;import org.ofdrw.sign.signContainer.SESV4Container;import org.ofdrw.sign.stamppos.NormalStampPos;import org.ofdrw.sign.verify.OFDValidator;import org.ofdrw.sign.verify.container.SESV4ValidateContainer;import java.io.File;import java.io.IOException;import java.nio.file.Files;import java.nio.file.Path;import java.nio.file.Paths;import java.security.GeneralSecurityException;import java.security.PrivateKey;import java.security.cert.Certificate;import java.util.List;/** * @Classname FileSingUtils * @Author: hzr * @Description TODO * @Version 1.0.0 * @Date 2023/12/6 11:24 * @Created by 22906 */public class FileSingUtils {    public static void setFileSing(File fromPath,File toPath) throws GeneralSecurityException, IOException {        Path userP12Path = Paths.get("src/main/resources", "USER.p12");        Path sealPath = Paths.get("src/main/resources", "UserV4.esl");        PrivateKey prvKey = PKCS12Tools.ReadPrvKey(userP12Path, "private", "777777");        Certificate signCert = PKCS12Tools.ReadUserCert(userP12Path, "private", "777777");        SESeal seal = SESeal.getInstance(Files.readAllBytes(sealPath));        Path src = Paths.get(fromPath.getPath());        Path out = Paths.get(toPath.getPath());        // 1. 构造签名引擎        try (OFDReader reader = new OFDReader(src);             OFDSigner signer = new OFDSigner(reader, out, new NumberFormatAtomicSignID())        ) {            SESV4Container signContainer = new SESV4Container(prvKey, seal, signCert);            // 2. 设置签名模式            signer.setSignMode(SignMode.WholeProtected);            // 3. 设置签名使用的扩展签名容器            signer.setSignContainer(signContainer);            // 4. 设置显示位置            signer.addApPos(new NormalStampPos(1, 50, 50, 40, 40));            // 5. 执行签名            signer.exeSign();            // 6. 关闭签名引擎，生成文档。        }        // 验证        try (OFDReader reader = new OFDReader(out);             OFDValidator validator = new OFDValidator(reader)) {            validator.setValidator(new SESV4ValidateContainer());            validator.exeValidate();            System.out.println(">> 验证通过");        }    }}